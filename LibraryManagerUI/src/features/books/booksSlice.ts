import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { Book } from "./models/Book";

export interface BooksState {
  books: Book[];
  numberOfAvailableBooks: number;
  status: string;
}

const initialState: BooksState = {
  books: [],
  numberOfAvailableBooks: 0,
  status: "idle",
};

export const bookSlice = createSlice({
  name: "book",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    lendBook: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.numberOfAvailableBooks -= 1;
    },
    returnBook: (state) => {
      state.numberOfAvailableBooks += 1;
    },
    setNumberOfAvailableBooks: (state, action: PayloadAction<number>) => {
      state.numberOfAvailableBooks = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.  
});

export const { lendBook, returnBook, setNumberOfAvailableBooks } = bookSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectBookCount = (state: RootState) =>
  state.books.numberOfAvailableBooks;

export const selectBooks = (state: RootState) => state.books.books;

export default bookSlice.reducer;
